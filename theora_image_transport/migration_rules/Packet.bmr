class update__theora_image_transport_packet__d804434eb295ca184dd6d2e32479185c(MessageUpdateRule):
	old_type = "theora_image_transport/packet"
	old_full_text = """
uint8[] blob
int32 bytes
int32 b_o_s
int32 e_o_s

int64 granulepos  
int64 packetno
"""

	new_type = "theora_image_transport/Packet"
	new_full_text = """
# ROS message adaptation of the ogg_packet struct from libogg,
# see http://www.xiph.org/ogg/doc/libogg/ogg_packet.html.

Header header     # Original sensor_msgs/Image header
uint8[] data      # Raw Theora packet data (combines packet and bytes fields from ogg_packet)
int32 b_o_s       # Flag indicating whether this packet begins a logical bitstream
int32 e_o_s       # Flag indicating whether this packet ends a bitstream
int64 granulepos  # A number indicating the position of this packet in the decoded data
int64 packetno    # Sequential number of this packet in the ogg bitstream

================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""

	order = 0
	migrated_types = []

	valid = True

	def update(self, old_msg, new_msg):
		new_msg.header     = self.get_new_class('roslib/Header')()
		new_msg.data       = old_msg.blob
		new_msg.b_o_s      = old_msg.b_o_s
		new_msg.e_o_s      = old_msg.e_o_s
		new_msg.granulepos = old_msg.granulepos
		new_msg.packetno   = old_msg.packetno
